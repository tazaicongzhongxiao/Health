// Code generated by protoc-gen-go. DO NOT EDIT.
// source: healthy.proto

package protoHealthy

import (
	comm "MyTestMall/protoImp/comm"
	context "context"
	json "encoding/json"
	fmt "fmt"
	tars "github.com/TarsCloud/TarsGo/tars"
	model "github.com/TarsCloud/TarsGo/tars/model"
	requestf "github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	current "github.com/TarsCloud/TarsGo/tars/util/current"
	tools "github.com/TarsCloud/TarsGo/tars/util/tools"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BodyParam struct {
	// 身体参数对照表ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 性别 1 男 2 女
	Sex int32 `protobuf:"varint,2,opt,name=sex,proto3" json:"sex,omitempty"`
	// 年龄
	Age int32 `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	// 身高cm
	High float32 `protobuf:"fixed32,4,opt,name=high,proto3" json:"high,omitempty"`
	// 体重kg
	Weight float32 `protobuf:"fixed32,5,opt,name=weight,proto3" json:"weight,omitempty"`
	// 体重指数
	BMI                  float32  `protobuf:"fixed32,6,opt,name=BMI,proto3" json:"BMI,omitempty"`
	CreatedAt            int64    `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BodyParam) Reset()         { *m = BodyParam{} }
func (m *BodyParam) String() string { return proto.CompactTextString(m) }
func (*BodyParam) ProtoMessage()    {}
func (*BodyParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_741f22f95cb14d6b, []int{0}
}

func (m *BodyParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BodyParam.Unmarshal(m, b)
}
func (m *BodyParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BodyParam.Marshal(b, m, deterministic)
}
func (m *BodyParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BodyParam.Merge(m, src)
}
func (m *BodyParam) XXX_Size() int {
	return xxx_messageInfo_BodyParam.Size(m)
}
func (m *BodyParam) XXX_DiscardUnknown() {
	xxx_messageInfo_BodyParam.DiscardUnknown(m)
}

var xxx_messageInfo_BodyParam proto.InternalMessageInfo

func (m *BodyParam) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BodyParam) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *BodyParam) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *BodyParam) GetHigh() float32 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *BodyParam) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *BodyParam) GetBMI() float32 {
	if m != nil {
		return m.BMI
	}
	return 0
}

func (m *BodyParam) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *BodyParam) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type ReqBodyParamPage struct {
	Page                 *comm.PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Bmi                  float32        `protobuf:"fixed32,2,opt,name=bmi,proto3" json:"bmi,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ReqBodyParamPage) Reset()         { *m = ReqBodyParamPage{} }
func (m *ReqBodyParamPage) String() string { return proto.CompactTextString(m) }
func (*ReqBodyParamPage) ProtoMessage()    {}
func (*ReqBodyParamPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_741f22f95cb14d6b, []int{1}
}

func (m *ReqBodyParamPage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqBodyParamPage.Unmarshal(m, b)
}
func (m *ReqBodyParamPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqBodyParamPage.Marshal(b, m, deterministic)
}
func (m *ReqBodyParamPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqBodyParamPage.Merge(m, src)
}
func (m *ReqBodyParamPage) XXX_Size() int {
	return xxx_messageInfo_ReqBodyParamPage.Size(m)
}
func (m *ReqBodyParamPage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqBodyParamPage.DiscardUnknown(m)
}

var xxx_messageInfo_ReqBodyParamPage proto.InternalMessageInfo

func (m *ReqBodyParamPage) GetPage() *comm.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqBodyParamPage) GetBmi() float32 {
	if m != nil {
		return m.Bmi
	}
	return 0
}

type ResBodyParamPage struct {
	List                 []*BodyParam `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total                int64        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ResBodyParamPage) Reset()         { *m = ResBodyParamPage{} }
func (m *ResBodyParamPage) String() string { return proto.CompactTextString(m) }
func (*ResBodyParamPage) ProtoMessage()    {}
func (*ResBodyParamPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_741f22f95cb14d6b, []int{2}
}

func (m *ResBodyParamPage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResBodyParamPage.Unmarshal(m, b)
}
func (m *ResBodyParamPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResBodyParamPage.Marshal(b, m, deterministic)
}
func (m *ResBodyParamPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResBodyParamPage.Merge(m, src)
}
func (m *ResBodyParamPage) XXX_Size() int {
	return xxx_messageInfo_ResBodyParamPage.Size(m)
}
func (m *ResBodyParamPage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResBodyParamPage.DiscardUnknown(m)
}

var xxx_messageInfo_ResBodyParamPage proto.InternalMessageInfo

func (m *ResBodyParamPage) GetList() []*BodyParam {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResBodyParamPage) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type Food struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 食物名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 热量 kcal/100g
	Heat float32 `protobuf:"fixed32,3,opt,name=heat,proto3" json:"heat,omitempty"`
	// 能量j/100g
	Energy float32 `protobuf:"fixed32,4,opt,name=energy,proto3" json:"energy,omitempty"`
	// 图片 JSON数组对应图片ID 最多上传15张
	Pic                  []string `protobuf:"bytes,5,rep,name=pic,proto3" json:"pic,omitempty"`
	CreatedAt            int64    `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Food) Reset()         { *m = Food{} }
func (m *Food) String() string { return proto.CompactTextString(m) }
func (*Food) ProtoMessage()    {}
func (*Food) Descriptor() ([]byte, []int) {
	return fileDescriptor_741f22f95cb14d6b, []int{3}
}

func (m *Food) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Food.Unmarshal(m, b)
}
func (m *Food) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Food.Marshal(b, m, deterministic)
}
func (m *Food) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Food.Merge(m, src)
}
func (m *Food) XXX_Size() int {
	return xxx_messageInfo_Food.Size(m)
}
func (m *Food) XXX_DiscardUnknown() {
	xxx_messageInfo_Food.DiscardUnknown(m)
}

var xxx_messageInfo_Food proto.InternalMessageInfo

func (m *Food) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Food) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Food) GetHeat() float32 {
	if m != nil {
		return m.Heat
	}
	return 0
}

func (m *Food) GetEnergy() float32 {
	if m != nil {
		return m.Energy
	}
	return 0
}

func (m *Food) GetPic() []string {
	if m != nil {
		return m.Pic
	}
	return nil
}

func (m *Food) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Food) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type ReqFoodPage struct {
	Page                 *comm.PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Name                 string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ReqFoodPage) Reset()         { *m = ReqFoodPage{} }
func (m *ReqFoodPage) String() string { return proto.CompactTextString(m) }
func (*ReqFoodPage) ProtoMessage()    {}
func (*ReqFoodPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_741f22f95cb14d6b, []int{4}
}

func (m *ReqFoodPage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqFoodPage.Unmarshal(m, b)
}
func (m *ReqFoodPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqFoodPage.Marshal(b, m, deterministic)
}
func (m *ReqFoodPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqFoodPage.Merge(m, src)
}
func (m *ReqFoodPage) XXX_Size() int {
	return xxx_messageInfo_ReqFoodPage.Size(m)
}
func (m *ReqFoodPage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqFoodPage.DiscardUnknown(m)
}

var xxx_messageInfo_ReqFoodPage proto.InternalMessageInfo

func (m *ReqFoodPage) GetPage() *comm.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqFoodPage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ResFoodPage struct {
	List                 []*Food  `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total                int64    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResFoodPage) Reset()         { *m = ResFoodPage{} }
func (m *ResFoodPage) String() string { return proto.CompactTextString(m) }
func (*ResFoodPage) ProtoMessage()    {}
func (*ResFoodPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_741f22f95cb14d6b, []int{5}
}

func (m *ResFoodPage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResFoodPage.Unmarshal(m, b)
}
func (m *ResFoodPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResFoodPage.Marshal(b, m, deterministic)
}
func (m *ResFoodPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResFoodPage.Merge(m, src)
}
func (m *ResFoodPage) XXX_Size() int {
	return xxx_messageInfo_ResFoodPage.Size(m)
}
func (m *ResFoodPage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResFoodPage.DiscardUnknown(m)
}

var xxx_messageInfo_ResFoodPage proto.InternalMessageInfo

func (m *ResFoodPage) GetList() []*Food {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResFoodPage) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type Sports struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Equipment            []string `protobuf:"bytes,3,rep,name=equipment,proto3" json:"equipment,omitempty"`
	Hour                 int32    `protobuf:"varint,4,opt,name=hour,proto3" json:"hour,omitempty"`
	CreatedAt            int64    `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sports) Reset()         { *m = Sports{} }
func (m *Sports) String() string { return proto.CompactTextString(m) }
func (*Sports) ProtoMessage()    {}
func (*Sports) Descriptor() ([]byte, []int) {
	return fileDescriptor_741f22f95cb14d6b, []int{6}
}

func (m *Sports) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sports.Unmarshal(m, b)
}
func (m *Sports) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sports.Marshal(b, m, deterministic)
}
func (m *Sports) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sports.Merge(m, src)
}
func (m *Sports) XXX_Size() int {
	return xxx_messageInfo_Sports.Size(m)
}
func (m *Sports) XXX_DiscardUnknown() {
	xxx_messageInfo_Sports.DiscardUnknown(m)
}

var xxx_messageInfo_Sports proto.InternalMessageInfo

func (m *Sports) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Sports) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Sports) GetEquipment() []string {
	if m != nil {
		return m.Equipment
	}
	return nil
}

func (m *Sports) GetHour() int32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func (m *Sports) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Sports) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type ReqSportsPage struct {
	Page                 *comm.PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Name                 string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ReqSportsPage) Reset()         { *m = ReqSportsPage{} }
func (m *ReqSportsPage) String() string { return proto.CompactTextString(m) }
func (*ReqSportsPage) ProtoMessage()    {}
func (*ReqSportsPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_741f22f95cb14d6b, []int{7}
}

func (m *ReqSportsPage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqSportsPage.Unmarshal(m, b)
}
func (m *ReqSportsPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqSportsPage.Marshal(b, m, deterministic)
}
func (m *ReqSportsPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSportsPage.Merge(m, src)
}
func (m *ReqSportsPage) XXX_Size() int {
	return xxx_messageInfo_ReqSportsPage.Size(m)
}
func (m *ReqSportsPage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSportsPage.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSportsPage proto.InternalMessageInfo

func (m *ReqSportsPage) GetPage() *comm.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqSportsPage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ResSportsPage struct {
	List                 []*Sports `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total                int64     `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ResSportsPage) Reset()         { *m = ResSportsPage{} }
func (m *ResSportsPage) String() string { return proto.CompactTextString(m) }
func (*ResSportsPage) ProtoMessage()    {}
func (*ResSportsPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_741f22f95cb14d6b, []int{8}
}

func (m *ResSportsPage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResSportsPage.Unmarshal(m, b)
}
func (m *ResSportsPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResSportsPage.Marshal(b, m, deterministic)
}
func (m *ResSportsPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResSportsPage.Merge(m, src)
}
func (m *ResSportsPage) XXX_Size() int {
	return xxx_messageInfo_ResSportsPage.Size(m)
}
func (m *ResSportsPage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResSportsPage.DiscardUnknown(m)
}

var xxx_messageInfo_ResSportsPage proto.InternalMessageInfo

func (m *ResSportsPage) GetList() []*Sports {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResSportsPage) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type ReqId struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqId) Reset()         { *m = ReqId{} }
func (m *ReqId) String() string { return proto.CompactTextString(m) }
func (*ReqId) ProtoMessage()    {}
func (*ReqId) Descriptor() ([]byte, []int) {
	return fileDescriptor_741f22f95cb14d6b, []int{9}
}

func (m *ReqId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqId.Unmarshal(m, b)
}
func (m *ReqId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqId.Marshal(b, m, deterministic)
}
func (m *ReqId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqId.Merge(m, src)
}
func (m *ReqId) XXX_Size() int {
	return xxx_messageInfo_ReqId.Size(m)
}
func (m *ReqId) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqId.DiscardUnknown(m)
}

var xxx_messageInfo_ReqId proto.InternalMessageInfo

func (m *ReqId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*BodyParam)(nil), "protoHealthy.BodyParam")
	proto.RegisterType((*ReqBodyParamPage)(nil), "protoHealthy.ReqBodyParamPage")
	proto.RegisterType((*ResBodyParamPage)(nil), "protoHealthy.ResBodyParamPage")
	proto.RegisterType((*Food)(nil), "protoHealthy.Food")
	proto.RegisterType((*ReqFoodPage)(nil), "protoHealthy.ReqFoodPage")
	proto.RegisterType((*ResFoodPage)(nil), "protoHealthy.ResFoodPage")
	proto.RegisterType((*Sports)(nil), "protoHealthy.Sports")
	proto.RegisterType((*ReqSportsPage)(nil), "protoHealthy.ReqSportsPage")
	proto.RegisterType((*ResSportsPage)(nil), "protoHealthy.ResSportsPage")
	proto.RegisterType((*ReqId)(nil), "protoHealthy.ReqId")
}

func init() { proto.RegisterFile("healthy.proto", fileDescriptor_741f22f95cb14d6b) }

var fileDescriptor_741f22f95cb14d6b = []byte{
	// 610 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xed, 0xd8, 0x4e, 0x9b, 0x69, 0x0b, 0x65, 0x5b, 0x51, 0x63, 0xfe, 0x28, 0xda, 0x03,
	0x58, 0x42, 0xea, 0x21, 0xc0, 0x01, 0x2e, 0xa8, 0x29, 0x42, 0x0d, 0xb4, 0xa2, 0x6c, 0xc5, 0x19,
	0x6d, 0xe3, 0xc5, 0xb1, 0x14, 0xc7, 0x8e, 0xbd, 0x01, 0xf2, 0x04, 0xbc, 0x04, 0x67, 0x5e, 0x82,
	0x97, 0x43, 0xb3, 0x76, 0x5c, 0x1b, 0xdb, 0x11, 0x28, 0xa7, 0xcc, 0xce, 0xec, 0x7e, 0x33, 0xdf,
	0x2f, 0x63, 0xd8, 0x9b, 0x08, 0x3e, 0x95, 0x93, 0xe5, 0x71, 0x9c, 0x44, 0x32, 0x22, 0xbb, 0xea,
	0xe7, 0x2c, 0xcb, 0x39, 0x30, 0x8e, 0xc2, 0x30, 0xab, 0xd0, 0xdf, 0x3a, 0xf4, 0x86, 0x91, 0xb7,
	0xbc, 0xe4, 0x09, 0x0f, 0xc9, 0x2d, 0xe8, 0x04, 0x9e, 0xad, 0xf7, 0x75, 0xd7, 0x60, 0x9d, 0xc0,
	0x23, 0xfb, 0x60, 0xa4, 0xe2, 0xbb, 0xdd, 0xe9, 0xeb, 0xae, 0xc5, 0x30, 0xc4, 0x0c, 0xf7, 0x85,
	0x6d, 0x64, 0x19, 0xee, 0x0b, 0x42, 0xc0, 0x9c, 0x04, 0xfe, 0xc4, 0x36, 0xfb, 0xba, 0xdb, 0x61,
	0x2a, 0x26, 0x77, 0xa1, 0xfb, 0x4d, 0x04, 0xfe, 0x44, 0xda, 0x96, 0xca, 0xe6, 0x27, 0x7c, 0x3d,
	0xbc, 0x18, 0xd9, 0x5d, 0x95, 0xc4, 0x90, 0x3c, 0x04, 0x18, 0x27, 0x82, 0x4b, 0xe1, 0x7d, 0xe6,
	0xd2, 0xde, 0x52, 0x9d, 0x7b, 0x79, 0xe6, 0x44, 0x62, 0x79, 0x11, 0x7b, 0xab, 0xf2, 0x76, 0x56,
	0xce, 0x33, 0x27, 0x92, 0x5e, 0xc0, 0x3e, 0x13, 0xf3, 0x62, 0xfe, 0x4b, 0x9c, 0xe7, 0x09, 0x98,
	0x31, 0x8e, 0x88, 0x2e, 0x76, 0x06, 0x07, 0x99, 0xcf, 0x53, 0xe5, 0x98, 0xfb, 0x62, 0x34, 0xfb,
	0x12, 0x31, 0x75, 0x01, 0x87, 0xb9, 0x0e, 0x03, 0x65, 0xae, 0xc3, 0x30, 0xa4, 0x9f, 0x50, 0x2e,
	0xad, 0xca, 0x3d, 0x05, 0x73, 0x1a, 0xa4, 0xd2, 0xd6, 0xfb, 0x86, 0xbb, 0x33, 0x38, 0x3a, 0x2e,
	0x93, 0x3c, 0x2e, 0xae, 0x32, 0x75, 0x89, 0x1c, 0x82, 0x25, 0x23, 0xc9, 0xa7, 0x4a, 0xd4, 0x60,
	0xd9, 0x81, 0xfe, 0xd2, 0xc1, 0x7c, 0x1b, 0x45, 0x5e, 0x0d, 0x2f, 0x01, 0x73, 0xc6, 0x43, 0xa1,
	0x6e, 0xf7, 0x98, 0x8a, 0x15, 0x4e, 0xc1, 0xa5, 0x22, 0x8c, 0x38, 0x05, 0x97, 0x88, 0x53, 0xcc,
	0x44, 0xe2, 0x2f, 0x73, 0xc8, 0xf9, 0x09, 0x1d, 0xc4, 0xc1, 0xd8, 0xb6, 0xfa, 0x86, 0xdb, 0x63,
	0x18, 0x6e, 0x88, 0xf3, 0x1d, 0xec, 0x30, 0x31, 0xc7, 0x51, 0xff, 0x8f, 0x64, 0x83, 0x0f, 0xfa,
	0x1e, 0xb5, 0xd2, 0x42, 0xeb, 0x71, 0x05, 0x23, 0xa9, 0x62, 0xc4, 0x5b, 0x6b, 0x09, 0xfe, 0xd4,
	0xa1, 0x7b, 0x15, 0x47, 0x89, 0x4c, 0xff, 0x89, 0xe1, 0x03, 0xe8, 0x89, 0xf9, 0x22, 0x88, 0x43,
	0x31, 0x43, 0x90, 0x48, 0xe7, 0x26, 0xa1, 0x08, 0x47, 0x8b, 0x44, 0xb1, 0xb4, 0x98, 0x8a, 0x37,
	0xe4, 0x76, 0x0e, 0x7b, 0x4c, 0xcc, 0xb3, 0x01, 0x37, 0x27, 0xf7, 0x01, 0xd5, 0xd2, 0x92, 0x9a,
	0x5b, 0x61, 0x77, 0x58, 0x65, 0x97, 0xdd, 0x5b, 0x4b, 0xef, 0x08, 0x2c, 0x26, 0xe6, 0xa3, 0xda,
	0xfe, 0x0d, 0x7e, 0x74, 0x61, 0x2b, 0xd7, 0x21, 0x1f, 0x61, 0xaf, 0xba, 0xf8, 0x8f, 0xaa, 0x7d,
	0xfe, 0xfe, 0xce, 0x9c, 0x5a, 0xbd, 0xfa, 0xe1, 0x50, 0x8d, 0x9c, 0x96, 0x24, 0xaf, 0xf8, 0x57,
	0x41, 0xda, 0xbe, 0x1e, 0xa7, 0xad, 0x40, 0x35, 0xf2, 0xba, 0x24, 0x72, 0x8e, 0x1e, 0x0f, 0x6a,
	0x73, 0x8d, 0xbc, 0xf5, 0x02, 0xb7, 0x8b, 0xe3, 0x1b, 0x31, 0x15, 0x72, 0xcd, 0x1c, 0x77, 0x4a,
	0xff, 0x54, 0x22, 0xd2, 0xc5, 0x54, 0x52, 0x8d, 0x0c, 0x61, 0xbb, 0x58, 0xe3, 0x7b, 0xb5, 0xe6,
	0xab, 0x92, 0x53, 0x2b, 0x15, 0xcb, 0x4f, 0x35, 0xf2, 0x3c, 0xd3, 0x50, 0x14, 0x1a, 0x96, 0xdf,
	0x69, 0xc8, 0x51, 0x8d, 0xbc, 0xc8, 0x5e, 0xb5, 0xdb, 0x6e, 0x7b, 0x06, 0x18, 0xe5, 0x66, 0x9b,
	0xda, 0x35, 0xfa, 0x3c, 0x03, 0x28, 0x2d, 0xdd, 0xfd, 0x5a, 0xbf, 0x9b, 0xa2, 0x53, 0x2b, 0x96,
	0xd6, 0x95, 0x6a, 0xe4, 0xd5, 0x4a, 0x49, 0xf9, 0x6d, 0x5c, 0x58, 0xa7, 0x31, 0x4b, 0x35, 0xf2,
	0x72, 0xf5, 0xb6, 0xdd, 0x75, 0xfb, 0xd3, 0xdd, 0x2c, 0xce, 0x9d, 0x37, 0x37, 0x6e, 0xf2, 0x7e,
	0xdd, 0x55, 0xb9, 0x67, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x92, 0xda, 0xa0, 0xf9, 0x38, 0x07,
	0x00, 0x00,
}

// This following code was generated by tarsrpc
// Gernerated from healthy.proto
type Healthy struct {
	servant model.Servant
}

// SetServant is required by the servant interface.
func (obj *Healthy) SetServant(servant model.Servant) {
	obj.servant = servant
}

// AddServant is required by the servant interface
func (obj *Healthy) AddServant(imp PBHealthyServant, objStr string) {
	tars.AddServant(obj, imp, objStr)
}

// AddServantWithContext adds servant  for the service with context
func (obj *Healthy) AddServantWithContext(imp PBHealthyServantWithContext, objStr string) {
	tars.AddServantWithContext(obj, imp, objStr)
}

// TarsSetTimeout is required by the servant interface. t is the timeout in ms.
func (obj *Healthy) TarsSetTimeout(t int) {
	obj.servant.TarsSetTimeout(t)
}

// TarsSetProtocol is required by the servant interface. t is the protocol.
func (obj *Healthy) TarsSetProtocol(p model.Protocol) {
	obj.servant.TarsSetProtocol(p)
}

type PBHealthyServant interface {
	BodyParamPage(input ReqBodyParamPage) (output ResBodyParamPage, err error)
	BodyParamSave(input BodyParam) (output BodyParam, err error)
	BodyParamList(input ReqId) (output BodyParam, err error)
	BodyParamDelete(input BodyParam) (output comm.Result, err error)
	FoodPage(input ReqFoodPage) (output ResFoodPage, err error)
	FoodSave(input Food) (output Food, err error)
	FoodList(input ReqId) (output Food, err error)
	FoodDelete(input Food) (output comm.Result, err error)
	SportsPage(input ReqSportsPage) (output ResSportsPage, err error)
	SportsSave(input Sports) (output Sports, err error)
	SportsList(input ReqId) (output Sports, err error)
	SportsDelete(input Sports) (output comm.Result, err error)
}

type PBHealthyServantWithContext interface {
	BodyParamPage(ctx context.Context, input ReqBodyParamPage) (output ResBodyParamPage, err error)
	BodyParamSave(ctx context.Context, input BodyParam) (output BodyParam, err error)
	BodyParamList(ctx context.Context, input ReqId) (output BodyParam, err error)
	BodyParamDelete(ctx context.Context, input BodyParam) (output comm.Result, err error)
	FoodPage(ctx context.Context, input ReqFoodPage) (output ResFoodPage, err error)
	FoodSave(ctx context.Context, input Food) (output Food, err error)
	FoodList(ctx context.Context, input ReqId) (output Food, err error)
	FoodDelete(ctx context.Context, input Food) (output comm.Result, err error)
	SportsPage(ctx context.Context, input ReqSportsPage) (output ResSportsPage, err error)
	SportsSave(ctx context.Context, input Sports) (output Sports, err error)
	SportsList(ctx context.Context, input ReqId) (output Sports, err error)
	SportsDelete(ctx context.Context, input Sports) (output comm.Result, err error)
}

// Dispatch is used to call the user implement of the defined method.
func (obj *Healthy) Dispatch(ctx context.Context, val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) {
	input := tools.Int8ToByte(req.SBuffer)
	var output []byte
	funcName := req.SFuncName
	switch funcName {

	case "BodyParamPage":
		inputDefine := ReqBodyParamPage{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResBodyParamPage
		if !withContext {
			imp := val.(PBHealthyServant)
			res, err = imp.BodyParamPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(PBHealthyServantWithContext)
			res, err = imp.BodyParamPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "BodyParamSave":
		inputDefine := BodyParam{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res BodyParam
		if !withContext {
			imp := val.(PBHealthyServant)
			res, err = imp.BodyParamSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(PBHealthyServantWithContext)
			res, err = imp.BodyParamSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "BodyParamList":
		inputDefine := ReqId{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res BodyParam
		if !withContext {
			imp := val.(PBHealthyServant)
			res, err = imp.BodyParamList(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(PBHealthyServantWithContext)
			res, err = imp.BodyParamList(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "BodyParamDelete":
		inputDefine := BodyParam{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res comm.Result
		if !withContext {
			imp := val.(PBHealthyServant)
			res, err = imp.BodyParamDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(PBHealthyServantWithContext)
			res, err = imp.BodyParamDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "FoodPage":
		inputDefine := ReqFoodPage{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResFoodPage
		if !withContext {
			imp := val.(PBHealthyServant)
			res, err = imp.FoodPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(PBHealthyServantWithContext)
			res, err = imp.FoodPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "FoodSave":
		inputDefine := Food{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Food
		if !withContext {
			imp := val.(PBHealthyServant)
			res, err = imp.FoodSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(PBHealthyServantWithContext)
			res, err = imp.FoodSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "FoodList":
		inputDefine := ReqId{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Food
		if !withContext {
			imp := val.(PBHealthyServant)
			res, err = imp.FoodList(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(PBHealthyServantWithContext)
			res, err = imp.FoodList(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "FoodDelete":
		inputDefine := Food{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res comm.Result
		if !withContext {
			imp := val.(PBHealthyServant)
			res, err = imp.FoodDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(PBHealthyServantWithContext)
			res, err = imp.FoodDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SportsPage":
		inputDefine := ReqSportsPage{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResSportsPage
		if !withContext {
			imp := val.(PBHealthyServant)
			res, err = imp.SportsPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(PBHealthyServantWithContext)
			res, err = imp.SportsPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SportsSave":
		inputDefine := Sports{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Sports
		if !withContext {
			imp := val.(PBHealthyServant)
			res, err = imp.SportsSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(PBHealthyServantWithContext)
			res, err = imp.SportsSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SportsList":
		inputDefine := ReqId{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Sports
		if !withContext {
			imp := val.(PBHealthyServant)
			res, err = imp.SportsList(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(PBHealthyServantWithContext)
			res, err = imp.SportsList(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SportsDelete":
		inputDefine := Sports{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res comm.Result
		if !withContext {
			imp := val.(PBHealthyServant)
			res, err = imp.SportsDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(PBHealthyServantWithContext)
			res, err = imp.SportsDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var statusMap map[string]string
	if status, ok := current.GetResponseStatus(ctx); ok && status != nil {
		statusMap = status
	}
	var contextMap map[string]string
	if ctx, ok := current.GetResponseContext(ctx); ok && ctx != nil {
		contextMap = ctx
	}
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(output),
		Status:       statusMap,
		SResultDesc:  "",
		Context:      contextMap,
	}
	return nil
}

// Change proto json 数据格式转换
func (obj *Healthy) Change(funcName string, val []byte, isRes bool) (output []byte, err error) {
	switch funcName {
	case "BodyParamPage":
		if !isRes {
			req := ReqBodyParamPage{}
			err = json.Unmarshal(val, &req)
			if err == nil {
				output, err = proto.Marshal(&req)
			}
		} else {
			res := ResBodyParamPage{}
			err = proto.Unmarshal(val, &res)
			if err == nil {
				output, err = json.Marshal(&res)
			}
		}
	case "BodyParamSave":
		if !isRes {
			req := BodyParam{}
			err = json.Unmarshal(val, &req)
			if err == nil {
				output, err = proto.Marshal(&req)
			}
		} else {
			res := BodyParam{}
			err = proto.Unmarshal(val, &res)
			if err == nil {
				output, err = json.Marshal(&res)
			}
		}
	case "BodyParamList":
		if !isRes {
			req := ReqId{}
			err = json.Unmarshal(val, &req)
			if err == nil {
				output, err = proto.Marshal(&req)
			}
		} else {
			res := BodyParam{}
			err = proto.Unmarshal(val, &res)
			if err == nil {
				output, err = json.Marshal(&res)
			}
		}
	case "BodyParamDelete":
		if !isRes {
			req := BodyParam{}
			err = json.Unmarshal(val, &req)
			if err == nil {
				output, err = proto.Marshal(&req)
			}
		} else {
			res := comm.Result{}
			err = proto.Unmarshal(val, &res)
			if err == nil {
				output, err = json.Marshal(&res)
			}
		}
	case "FoodPage":
		if !isRes {
			req := ReqFoodPage{}
			err = json.Unmarshal(val, &req)
			if err == nil {
				output, err = proto.Marshal(&req)
			}
		} else {
			res := ResFoodPage{}
			err = proto.Unmarshal(val, &res)
			if err == nil {
				output, err = json.Marshal(&res)
			}
		}
	case "FoodSave":
		if !isRes {
			req := Food{}
			err = json.Unmarshal(val, &req)
			if err == nil {
				output, err = proto.Marshal(&req)
			}
		} else {
			res := Food{}
			err = proto.Unmarshal(val, &res)
			if err == nil {
				output, err = json.Marshal(&res)
			}
		}
	case "FoodList":
		if !isRes {
			req := ReqId{}
			err = json.Unmarshal(val, &req)
			if err == nil {
				output, err = proto.Marshal(&req)
			}
		} else {
			res := Food{}
			err = proto.Unmarshal(val, &res)
			if err == nil {
				output, err = json.Marshal(&res)
			}
		}
	case "FoodDelete":
		if !isRes {
			req := Food{}
			err = json.Unmarshal(val, &req)
			if err == nil {
				output, err = proto.Marshal(&req)
			}
		} else {
			res := comm.Result{}
			err = proto.Unmarshal(val, &res)
			if err == nil {
				output, err = json.Marshal(&res)
			}
		}
	case "SportsPage":
		if !isRes {
			req := ReqSportsPage{}
			err = json.Unmarshal(val, &req)
			if err == nil {
				output, err = proto.Marshal(&req)
			}
		} else {
			res := ResSportsPage{}
			err = proto.Unmarshal(val, &res)
			if err == nil {
				output, err = json.Marshal(&res)
			}
		}
	case "SportsSave":
		if !isRes {
			req := Sports{}
			err = json.Unmarshal(val, &req)
			if err == nil {
				output, err = proto.Marshal(&req)
			}
		} else {
			res := Sports{}
			err = proto.Unmarshal(val, &res)
			if err == nil {
				output, err = json.Marshal(&res)
			}
		}
	case "SportsList":
		if !isRes {
			req := ReqId{}
			err = json.Unmarshal(val, &req)
			if err == nil {
				output, err = proto.Marshal(&req)
			}
		} else {
			res := Sports{}
			err = proto.Unmarshal(val, &res)
			if err == nil {
				output, err = json.Marshal(&res)
			}
		}
	case "SportsDelete":
		if !isRes {
			req := Sports{}
			err = json.Unmarshal(val, &req)
			if err == nil {
				output, err = proto.Marshal(&req)
			}
		} else {
			res := comm.Result{}
			err = proto.Unmarshal(val, &res)
			if err == nil {
				output, err = json.Marshal(&res)
			}
		}
	default:
		return nil, fmt.Errorf("func mismatch")
	}
	return output, err
}

// BodyParamPage is client rpc method as defined
func (obj *Healthy) BodyParamPage(input ReqBodyParamPage, opts ...map[string]string) (output ResBodyParamPage, err error) {
	ctx := context.Background()
	return obj.BodyParamPageWithContext(ctx, input, opts...)
}

// BodyParamPageWithContext is client rpc method as defined
func (obj *Healthy) BodyParamPageWithContext(ctx context.Context, input ReqBodyParamPage, opts ...map[string]string) (output ResBodyParamPage, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(ctx, 0, "BodyParamPage", inputMarshal, statusMap, contextMap, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	return output, nil
}

// BodyParamSave is client rpc method as defined
func (obj *Healthy) BodyParamSave(input BodyParam, opts ...map[string]string) (output BodyParam, err error) {
	ctx := context.Background()
	return obj.BodyParamSaveWithContext(ctx, input, opts...)
}

// BodyParamSaveWithContext is client rpc method as defined
func (obj *Healthy) BodyParamSaveWithContext(ctx context.Context, input BodyParam, opts ...map[string]string) (output BodyParam, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(ctx, 0, "BodyParamSave", inputMarshal, statusMap, contextMap, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	return output, nil
}

// BodyParamList is client rpc method as defined
func (obj *Healthy) BodyParamList(input ReqId, opts ...map[string]string) (output BodyParam, err error) {
	ctx := context.Background()
	return obj.BodyParamListWithContext(ctx, input, opts...)
}

// BodyParamListWithContext is client rpc method as defined
func (obj *Healthy) BodyParamListWithContext(ctx context.Context, input ReqId, opts ...map[string]string) (output BodyParam, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(ctx, 0, "BodyParamList", inputMarshal, statusMap, contextMap, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	return output, nil
}

// BodyParamDelete is client rpc method as defined
func (obj *Healthy) BodyParamDelete(input BodyParam, opts ...map[string]string) (output comm.Result, err error) {
	ctx := context.Background()
	return obj.BodyParamDeleteWithContext(ctx, input, opts...)
}

// BodyParamDeleteWithContext is client rpc method as defined
func (obj *Healthy) BodyParamDeleteWithContext(ctx context.Context, input BodyParam, opts ...map[string]string) (output comm.Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(ctx, 0, "BodyParamDelete", inputMarshal, statusMap, contextMap, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	return output, nil
}

// FoodPage is client rpc method as defined
func (obj *Healthy) FoodPage(input ReqFoodPage, opts ...map[string]string) (output ResFoodPage, err error) {
	ctx := context.Background()
	return obj.FoodPageWithContext(ctx, input, opts...)
}

// FoodPageWithContext is client rpc method as defined
func (obj *Healthy) FoodPageWithContext(ctx context.Context, input ReqFoodPage, opts ...map[string]string) (output ResFoodPage, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(ctx, 0, "FoodPage", inputMarshal, statusMap, contextMap, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	return output, nil
}

// FoodSave is client rpc method as defined
func (obj *Healthy) FoodSave(input Food, opts ...map[string]string) (output Food, err error) {
	ctx := context.Background()
	return obj.FoodSaveWithContext(ctx, input, opts...)
}

// FoodSaveWithContext is client rpc method as defined
func (obj *Healthy) FoodSaveWithContext(ctx context.Context, input Food, opts ...map[string]string) (output Food, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(ctx, 0, "FoodSave", inputMarshal, statusMap, contextMap, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	return output, nil
}

// FoodList is client rpc method as defined
func (obj *Healthy) FoodList(input ReqId, opts ...map[string]string) (output Food, err error) {
	ctx := context.Background()
	return obj.FoodListWithContext(ctx, input, opts...)
}

// FoodListWithContext is client rpc method as defined
func (obj *Healthy) FoodListWithContext(ctx context.Context, input ReqId, opts ...map[string]string) (output Food, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(ctx, 0, "FoodList", inputMarshal, statusMap, contextMap, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	return output, nil
}

// FoodDelete is client rpc method as defined
func (obj *Healthy) FoodDelete(input Food, opts ...map[string]string) (output comm.Result, err error) {
	ctx := context.Background()
	return obj.FoodDeleteWithContext(ctx, input, opts...)
}

// FoodDeleteWithContext is client rpc method as defined
func (obj *Healthy) FoodDeleteWithContext(ctx context.Context, input Food, opts ...map[string]string) (output comm.Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(ctx, 0, "FoodDelete", inputMarshal, statusMap, contextMap, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	return output, nil
}

// SportsPage is client rpc method as defined
func (obj *Healthy) SportsPage(input ReqSportsPage, opts ...map[string]string) (output ResSportsPage, err error) {
	ctx := context.Background()
	return obj.SportsPageWithContext(ctx, input, opts...)
}

// SportsPageWithContext is client rpc method as defined
func (obj *Healthy) SportsPageWithContext(ctx context.Context, input ReqSportsPage, opts ...map[string]string) (output ResSportsPage, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(ctx, 0, "SportsPage", inputMarshal, statusMap, contextMap, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	return output, nil
}

// SportsSave is client rpc method as defined
func (obj *Healthy) SportsSave(input Sports, opts ...map[string]string) (output Sports, err error) {
	ctx := context.Background()
	return obj.SportsSaveWithContext(ctx, input, opts...)
}

// SportsSaveWithContext is client rpc method as defined
func (obj *Healthy) SportsSaveWithContext(ctx context.Context, input Sports, opts ...map[string]string) (output Sports, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(ctx, 0, "SportsSave", inputMarshal, statusMap, contextMap, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	return output, nil
}

// SportsList is client rpc method as defined
func (obj *Healthy) SportsList(input ReqId, opts ...map[string]string) (output Sports, err error) {
	ctx := context.Background()
	return obj.SportsListWithContext(ctx, input, opts...)
}

// SportsListWithContext is client rpc method as defined
func (obj *Healthy) SportsListWithContext(ctx context.Context, input ReqId, opts ...map[string]string) (output Sports, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(ctx, 0, "SportsList", inputMarshal, statusMap, contextMap, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	return output, nil
}

// SportsDelete is client rpc method as defined
func (obj *Healthy) SportsDelete(input Sports, opts ...map[string]string) (output comm.Result, err error) {
	ctx := context.Background()
	return obj.SportsDeleteWithContext(ctx, input, opts...)
}

// SportsDeleteWithContext is client rpc method as defined
func (obj *Healthy) SportsDeleteWithContext(ctx context.Context, input Sports, opts ...map[string]string) (output comm.Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(ctx, 0, "SportsDelete", inputMarshal, statusMap, contextMap, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	return output, nil
}
